// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package schema

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for OpponentType.
const (
	OpponentTypePlayer OpponentType = "Player"
	OpponentTypeTeam   OpponentType = "Team"
)

// Defines values for OpponentTypePlayer.
const (
	OpponentTypePlayerPlayer OpponentTypePlayer = "Player"
)

// Match defines model for Match.
type Match struct {
	BeginAt *MatchBeginAt `json:"begin_at,omitempty"`
}

// MatchBeginAt defines model for MatchBeginAt.
type MatchBeginAt = time.Time

// MatchPlayerOpponentsObject defines model for MatchPlayerOpponentsObject.
type MatchPlayerOpponentsObject struct {
	OpponentType *OpponentTypePlayer `json:"opponent_type,omitempty"`
}

// Matches defines model for Matches.
type Matches = []Match

// OpponentType defines model for OpponentType.
type OpponentType string

// OpponentTypePlayer defines model for OpponentTypePlayer.
type OpponentTypePlayer string

// GetMatchesParams defines parameters for GetMatches.
type GetMatchesParams struct {
	Filter *MatchPlayerOpponentsObject `json:"filter,omitempty"`
}

// GetOpponentsParams defines parameters for GetOpponents.
type GetOpponentsParams struct {
	OpponentType *OpponentType `json:"opponent_type,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetMatches request
	GetMatches(ctx context.Context, params *GetMatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpponents request
	GetOpponents(ctx context.Context, params *GetOpponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetMatches(ctx context.Context, params *GetMatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMatchesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpponents(ctx context.Context, params *GetOpponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpponentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetMatchesRequest generates requests for GetMatches
func NewGetMatchesRequest(server string, params *GetMatchesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/matches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOpponentsRequest generates requests for GetOpponents
func NewGetOpponentsRequest(server string, params *GetOpponentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/matches/opponents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OpponentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "opponent_type", runtime.ParamLocationQuery, *params.OpponentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetMatchesWithResponse request
	GetMatchesWithResponse(ctx context.Context, params *GetMatchesParams, reqEditors ...RequestEditorFn) (*GetMatchesResponse, error)

	// GetOpponentsWithResponse request
	GetOpponentsWithResponse(ctx context.Context, params *GetOpponentsParams, reqEditors ...RequestEditorFn) (*GetOpponentsResponse, error)
}

type GetMatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Matches
}

// Status returns HTTPResponse.Status
func (r GetMatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Matches
}

// Status returns HTTPResponse.Status
func (r GetOpponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetMatchesWithResponse request returning *GetMatchesResponse
func (c *ClientWithResponses) GetMatchesWithResponse(ctx context.Context, params *GetMatchesParams, reqEditors ...RequestEditorFn) (*GetMatchesResponse, error) {
	rsp, err := c.GetMatches(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMatchesResponse(rsp)
}

// GetOpponentsWithResponse request returning *GetOpponentsResponse
func (c *ClientWithResponses) GetOpponentsWithResponse(ctx context.Context, params *GetOpponentsParams, reqEditors ...RequestEditorFn) (*GetOpponentsResponse, error) {
	rsp, err := c.GetOpponents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpponentsResponse(rsp)
}

// ParseGetMatchesResponse parses an HTTP response from a GetMatchesWithResponse call
func ParseGetMatchesResponse(rsp *http.Response) (*GetMatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Matches
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOpponentsResponse parses an HTTP response from a GetOpponentsWithResponse call
func ParseGetOpponentsResponse(rsp *http.Response) (*GetOpponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Matches
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List matches
	// (GET /matches)
	GetMatches(ctx echo.Context, params GetMatchesParams) error
	// List matches
	// (GET /matches/opponents)
	GetOpponents(ctx echo.Context, params GetOpponentsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMatches converts echo context to params.
func (w *ServerInterfaceWrapper) GetMatches(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMatchesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMatches(ctx, params)
	return err
}

// GetOpponents converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpponents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOpponentsParams
	// ------------- Optional query parameter "opponent_type" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "opponent_type", ctx.QueryParams(), &params.OpponentType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter opponent_type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOpponents(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/matches", wrapper.GetMatches)
	router.GET(baseURL+"/matches/opponents", wrapper.GetOpponents)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xTTW/TQBD9K+jBcZELx73BBSEVpYfeqqja2mNnq/1idyxhRfnvaOw4jmkKzY2cNuOZ",
	"9+a9mdmjjj7FQIEL9B6ZSoqh0Pjnh+F6Nz3rGJgCy9Ok5Gxt2MZQPZcYJFbqHXkjrw+ZWmi8rxbcavpa",
	"qhnvID91LFqYRvCmsYJs3F2OiTJb4W+NK6SQzkJ7PFFnw6OZenJu00I/vIH/q5R9YRy2YxOrmN6jjdkL",
	"JhrD9JGtJyh4G24pdLyD/qTAlh1Br0sVeEgSLZxt6DBD3zkzUN6kYy+bp2eq+Uql8Vj9OFH8XeRMdT8k",
	"msixCJ3wLJMvbxqWyFjJpbIoNTmbQTLOKQWWQu+hH3CkV7gn47FdoFYFF5y7oOEl7Ct4J9I/UMUDG9oI",
	"HXrnFGKiYJKFBhSS4d3oSOUXmzoaB9VQqbNNMito3NrC7/zJChnTeArfG2h8I15cSiYbT0y5jItJv5KL",
	"DUFz7klagcbPnvIAhWC8tNpax2PrV5zT5f2S6+Jh9KYhSnN0q9YH/vnm5jWSU97Z1SqU3nuTh5c+sOlE",
	"5mlJtpI9m1nNC/wPW5e0C8Zuzj5eb+36hN7q8GpP/wdPD4ffAQAA///fjXrlsQUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
